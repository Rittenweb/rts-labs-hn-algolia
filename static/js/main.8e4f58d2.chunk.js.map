{"version":3,"sources":["searchSlice.js","SearchBar.js","HelperText.js","SearchResults.js","PastSearches.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["searchSlice","createSlice","name","initialState","searches","currentResults","reducers","newSearch","state","action","push","term","payload","searchTerm","results","oldSearch","actions","selectSearches","search","selectResults","SearchBar","dispatch","useDispatch","useState","setSearchTerm","onSubmit","e","preventDefault","fetch","then","response","json","data","hits","filter","hit","_tags","includes","map","type","text","title","comment_text","url","story_url","date","created_at","points","catch","error","console","className","value","onChange","target","HelperText","useSelector","length","href","SearchResults","result","index","Date","dateString","getMonth","getDate","getFullYear","dangerouslySetInnerHTML","__html","PastSearches","onClick","App","configureStore","reducer","searchReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAIaA,EAAcC,YAAY,CACrCC,KAAM,SACNC,aAAc,CACZC,SAAU,GACVC,eAAgB,IAElBC,SAAU,CACRC,UAAW,SAACC,EAAOC,GACjBD,EAAMJ,SAASM,KAAK,CAClBC,KAAMF,EAAOG,QAAQC,WACrBC,QAASL,EAAOG,QAAQE,UAE1BN,EAAMH,eAAiBI,EAAOG,QAAQE,SAExCC,UAAW,SAACP,EAAOC,GACjBD,EAAMH,eAAiBI,EAAOG,QAAQE,Y,EAQxCd,EAAYgB,QAFdT,E,EAAAA,UACAQ,E,EAAAA,UAGWE,EAAiB,SAAAT,GAAK,OAAIA,EAAMU,OAAOd,UACvCe,EAAgB,SAAAX,GAAK,OAAIA,EAAMU,OAAOb,gBAEpCL,IAAf,Q,OC5Be,SAASoB,IACtB,IAAMC,EAAWC,cADiB,EAEEC,mBAAS,IAFX,mBAE3BV,EAF2B,KAEfW,EAFe,KA4ClC,OACE,uBAAMC,SArCR,SAAsBC,GACpBA,EAAEC,iBAEFC,MADkB,8CAAgDf,GAE/DgB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAEL,IAAIlB,EAAUkB,EAAKC,KAAKC,QAAO,SAACC,GAC9B,OAAOA,EAAIC,MAAMC,SAAS,UAAYF,EAAIC,MAAMC,SAAS,cAI3DvB,EAAUkB,EAAKC,KAAKK,KAAI,SAACH,GACvB,IAAII,EAMJ,MAAO,CACLC,KAAe,WALfD,EADEJ,EAAIC,MAAMC,SAAS,SACd,QAEA,WAGkBF,EAAIM,MAAQN,EAAIO,aACzCC,IAAc,UAATJ,EAAmBJ,EAAIQ,IAAMR,EAAIS,UACtCC,KAAMV,EAAIW,WACVC,OAAQZ,EAAIY,OACZR,WAIJlB,EAASd,EAAU,CAAEM,aAAYC,aACjCU,EAAc,OAEfwB,OAAM,SAACC,GACNC,QAAQD,MAAM,SAAUA,OAKEE,UAAU,SAAxC,UACE,uBAAOZ,KAAK,OAAOrC,KAAK,OAAOkD,MAAOvC,EAAYwC,SA1CtD,SAAsB3B,GACpBF,EAAcE,EAAE4B,OAAOF,QAyCqDD,UAAU,eACpF,uBAAOZ,KAAK,SAASa,MAAM,SAASD,UAAU,qBC/CrC,SAASI,IAGtB,OAFiBC,YAAYvC,GAEbwC,OAAS,EACvB,sBAAKN,UAAU,cAAf,+BACoB,sBAAMA,UAAU,IAAhB,mBADpB,yBAC0E,sBAAMA,UAAU,IAAhB,kBAD1E,gBAEI,sBAAMA,UAAU,IAAhB,yBAFJ,kCAKA,sBAAKA,UAAU,cAAf,uFAC6E,IAC3E,mBAAGO,KAAK,6BAAR,8BCXS,SAASC,IACtB,IAAM7C,EAAU0C,YAAYrC,GAE5B,OACE,sBAAKgC,UAAU,iBAAf,UACGrC,EAAQ2C,OAAS,GAAK,qBAAKN,UAAU,wBAAf,4BACtBrC,EAAQwB,KAAI,SAACsB,EAAQC,GACpB,IAAIV,EAA4B,UAAhBS,EAAOrB,KAAmB,sBAAwB,wBAC9DM,EAAO,IAAIiB,KAAKF,EAAOf,MACvBkB,EAAalB,EAAKmB,WAAa,IAAMnB,EAAKoB,UAAY,IAAMpB,EAAKqB,cACrE,OACE,oBAAGR,KAAME,EAAOjB,IAAiBQ,UAAWA,EAA5C,UACE,+BAAOY,IACP,sBAAMI,wBAAyB,CAAEC,OAAQR,EAAOpB,QAChD,iCAAOoB,EAAOb,OAAd,eAHwBc,SCXrB,SAASQ,IACtB,IAAMhD,EAAWC,cACXlB,EAAWoD,YAAYvC,GAM7B,OACE,sBAAKkC,UAAU,gBAAf,UACG/C,EAASqD,OAAS,GAAK,qBAAKN,UAAU,uBAAf,2BACvB/C,EAASkC,KAAI,SAACpB,EAAQ2C,GACrB,OACE,qBAAKS,QAAS,WARpBjD,EAASN,EAAU,CAAED,QAASV,EAQQyD,GARc/C,YAQMqC,UAAU,cAA9D,SACGjC,EAAOP,MADmCkD,S,MCGxCU,MAbf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACE,cAAC/B,EAAD,IACA,cAACmC,EAAD,IACA,sBAAKJ,UAAU,WAAf,UACE,cAACkB,EAAD,IACA,cAACV,EAAD,WCTOa,cAAe,CAC5BC,QAAS,CACPvD,OAAQwD,KCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB","file":"static/js/main.8e4f58d2.chunk.js","sourcesContent":["import {\r\n  createSlice\r\n} from '@reduxjs/toolkit';\r\n\r\nexport const searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState: {\r\n    searches: [],\r\n    currentResults: []\r\n  },\r\n  reducers: {\r\n    newSearch: (state, action) => {\r\n      state.searches.push({\r\n        term: action.payload.searchTerm,\r\n        results: action.payload.results\r\n      })\r\n      state.currentResults = action.payload.results;\r\n    },\r\n    oldSearch: (state, action) => {\r\n      state.currentResults = action.payload.results;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  newSearch,\r\n  oldSearch\r\n} = searchSlice.actions;\r\n\r\nexport const selectSearches = state => state.search.searches;\r\nexport const selectResults = state => state.search.currentResults\r\n\r\nexport default searchSlice.reducer;","import React, { useState } from 'react';\r\nimport { newSearch } from './searchSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function SearchBar() {\r\n  const dispatch = useDispatch();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  function handleChange(e) {\r\n    setSearchTerm(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let queryString = 'https://hn.algolia.com/api/v1/search?query=' + searchTerm;\r\n    fetch(queryString)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //Throw out misc results that are not stories or comments\r\n        let results = data.hits.filter((hit) => {\r\n          return hit._tags.includes('story') || hit._tags.includes('comment');\r\n        });\r\n\r\n        //For each hit, only save a few fields of relevant data\r\n        results = data.hits.map((hit) => {\r\n          let type;\r\n          if (hit._tags.includes('story')) {\r\n            type = 'story';\r\n          } else {\r\n            type = 'comment';\r\n          }\r\n          return {\r\n            text: type === 'story' ? hit.title : hit.comment_text,\r\n            url: type === 'story' ? hit.url : hit.story_url,\r\n            date: hit.created_at,\r\n            points: hit.points,\r\n            type,\r\n          };\r\n        });\r\n\r\n        dispatch(newSearch({ searchTerm, results }));\r\n        setSearchTerm('');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className='search'>\r\n      <input type='text' name='text' value={searchTerm} onChange={handleChange} className='search-bar'></input>\r\n      <input type='submit' value='Search' className='search-button'></input>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectSearches } from './searchSlice';\r\n\r\nexport default function HelperText() {\r\n  const searches = useSelector(selectSearches); //array of objects with two properties {term: string, results: array}\r\n\r\n  return searches.length > 0 ? (\r\n    <div className='helper-text'>\r\n      Story results are <span className='g'>green</span>. Comment results are <span className='b'>blue</span>. Click on\r\n      a <span className='r'>past search</span> to return to those results.\r\n    </div>\r\n  ) : (\r\n    <div className='helper-text'>\r\n      Enter a term to search for matching HackerNews stories or comments via the{' '}\r\n      <a href='https://hn.algolia.com/api'>HN Search API</a>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectResults } from './searchSlice';\r\n\r\nexport default function SearchResults() {\r\n  const results = useSelector(selectResults); //Array of objects, each of which has {type, date, url, text, points}\r\n\r\n  return (\r\n    <div className='search-results'>\r\n      {results.length > 0 && <div className='search-results-header'>Search Results</div>}\r\n      {results.map((result, index) => {\r\n        let className = result.type === 'story' ? 'search-result story' : 'search-result comment';\r\n        let date = new Date(result.date);\r\n        let dateString = date.getMonth() + '/' + date.getDate() + '/' + date.getFullYear();\r\n        return (\r\n          <a href={result.url} key={index} className={className}>\r\n            <span>{dateString}</span>\r\n            <span dangerouslySetInnerHTML={{ __html: result.text }}></span>\r\n            <span>{result.points} Points</span>\r\n          </a>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectSearches, oldSearch } from './searchSlice';\r\n\r\nexport default function PastSearches() {\r\n  const dispatch = useDispatch();\r\n  const searches = useSelector(selectSearches); //array of objects with two properties {term: string, results: array}\r\n\r\n  function handleClick(searchIndex) {\r\n    dispatch(oldSearch({ results: searches[searchIndex].results }));\r\n  }\r\n\r\n  return (\r\n    <div className='past-searches'>\r\n      {searches.length > 0 && <div className='past-searches-header'>Your Searches</div>}\r\n      {searches.map((search, index) => {\r\n        return (\r\n          <div onClick={() => handleClick(index)} key={index} className='past-search'>\r\n            {search.term}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport HelperText from './HelperText';\r\nimport SearchResults from './SearchResults';\r\nimport PastSearches from './PastSearches';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <SearchBar />\r\n      <HelperText />\r\n      <div className='app-body'>\r\n        <PastSearches />\r\n        <SearchResults />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n  configureStore\r\n} from '@reduxjs/toolkit';\r\nimport searchReducer from '../searchSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    search: searchReducer,\r\n  },\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}